package ca.nrc.cisti.lusql.drivers.lucene;
import java.io.*;
import org.apache.lucene.index.*;
import org.apache.lucene.analysis.Analyzer;
import java.lang.reflect.Constructor;
import org.apache.lucene.document.*;
import org.apache.lucene.store.*;
import java.util.*;

import ca.nrc.cisti.lusql.core.*;

/**
 * Describe class LuceneCore here.
 *
 *
 * Created: Tue Dec 23 15:45:17 2008
 *
 * @author <a href="mailto:gnewton@">Glen Newton</a>
 * @version 1.0
 */
abstract public class LuceneCore 
{
    boolean debug = false;
    /**
     * Describe query here.
     */
    private String query=null;

    /**
     * Describe SourceLocation here.
     */
    private String SourceLocation = null;
    /**
     * Describe RAMBufferSize here.
     */
    protected double RAMBufferSize=32.0;

    /**
     * Describe indexCreate here.
     */
    protected boolean indexCreate=true;

    /**
     * Describe analyzerName here.
     */
    protected String analyzerName;

    /**
     * Describe luceneIndexName here.
     */
    protected String luceneIndexName;

    /**
     * Describe stopWordFileName here.
     */
    protected String stopWordFileName;

    /**
     * Describe optimizeOnClose here.
     */
    protected boolean optimizeOnClose=true;

    /**
     * Describe removeOnDone here.
     */
    protected boolean removeOnDone=false;

    /**
     * Describe primaryKeyField here.
     */
    protected String primaryKeyField;


    /**
     * Creates a new <code>LuceneCore</code> instance.
     *
     */
    public LuceneCore() {

    }


    /**
     * Get the <code>RAMBufferSize</code> value.
     *
     * @return a <code>double</code> value
     */
    public final double getRAMBufferSize() {
	return RAMBufferSize;
    }

    /**
     * Set the <code>RAMBufferSize</code> value.
     *
     * @param newRAMBufferSize The new RAMBufferSize value.
     */
    public final void setRAMBufferSize(final double newRAMBufferSize) {
	this.RAMBufferSize = newRAMBufferSize;
    }

    /**
     * Get the <code>IndexCreate</code> value.
     *
     * @return a <code>boolean</code> value
     */
    public final boolean isIndexCreate() {
	return indexCreate;
    }

    /**
     * Set the <code>IndexCreate</code> value.
     *
     * @param newIndexCreate The new IndexCreate value.
     */
    public final void setIndexCreate(final boolean newIndexCreate) {
	this.indexCreate = newIndexCreate;
    }

    /**
     * Get the <code>AnalyzerName</code> value.
     *
     * @return a <code>String</code> value
     */
    public final String getAnalyzerName() {
	return analyzerName;
    }

    /**
     * Set the <code>AnalyzerName</code> value.
     *
     * @param newAnalyzerName The new AnalyzerName value.
     */
    public final void setAnalyzerName(final String newAnalyzerName) {
	this.analyzerName = newAnalyzerName;
    }

    /**
     * Get the <code>LuceneIndexName</code> value.
     *
     * @return a <code>String</code> value
     */
    public final String getLuceneIndexName() {
	return luceneIndexName;
    }

    /**
     * Set the <code>LuceneIndexName</code> value.
     *
     * @param newLuceneIndexName The new LuceneIndexName value.
     */
    public final void setLuceneIndexName(final String newLuceneIndexName) {
	this.luceneIndexName = newLuceneIndexName;
    }

    void luceneExtractProperties(Properties p)

	{
	    if(p.containsKey(LuSqlFields.BufferSizeKey))
		setRAMBufferSize(Double.parseDouble(p.getProperty(LuSqlFields.BufferSizeKey)));
	    db("RAMBufferSize", Double.toString(getRAMBufferSize()));

	    if(p.containsKey(LuSqlFields.CreateSinkKey))
		setIndexCreate(Boolean.parseBoolean(p.getProperty(LuSqlFields.CreateSinkKey)));
	    db("Create Index:", Boolean.toString(isIndexCreate()));

	    if(p.containsKey(LuSqlFields.OptimizeOnCloseKey))
		setOptimizeOnClose(Boolean.parseBoolean(p.getProperty(LuSqlFields.OptimizeOnCloseKey)));
	    db("OptimizeOnClose", "" + isOptimizeOnClose());

	    if(p.containsKey(LuSqlFields.SinkLocationKey))
		setLuceneIndexName(p.getProperty(LuSqlFields.SinkLocationKey));
	    db("SinkLocation", getLuceneIndexName());

	    if(p.containsKey(LuSqlFields.AnalyzerClassKey))
		setAnalyzerName(p.getProperty(LuSqlFields.AnalyzerClassKey));
	    db("AnalyzerClass", getAnalyzerName()); 

	    if(p.containsKey(LuSqlFields.StopWordFileNameKey))
		setStopWordFileName(p.getProperty(LuSqlFields.StopWordFileNameKey));
	    db("StopWordFile", getStopWordFileName());

	    if(p.containsKey(LuSqlFields.QueryKey))
		setQuery(p.getProperty(LuSqlFields.QueryKey));
	    db("Query", getQuery());

	    if(p.containsKey(LuSqlFields.SourceLocationKey))
		setSourceLocation(p.getProperty(LuSqlFields.SourceLocationKey));
	    db("SourceLocation", getSourceLocation());

	    if(p.containsKey(LuSqlFields.RemoveSinksOnDoneKey))
		setRemoveOnDone(Boolean.parseBoolean(p.getProperty(LuSqlFields.RemoveSinksOnDoneKey)));
	    db("RemoveSinksOnDone", "" + isRemoveOnDone());
	}


    public void db(String w, String v)
	{
	    if(debug)
		System.out.println(this.getClass().getName() 
				   + ":"
				   + w
				   + ":"
				   + v);
	}


    Analyzer newAnalyzer()
	throws ClassNotFoundException,
	NoSuchMethodException,
	InstantiationException,
	IllegalAccessException,
	java.lang.reflect.InvocationTargetException
	{
	    Class<?> analyserClass = Class.forName(getAnalyzerName());

	    Class<?> fileClass = null;
	    if(getStopWordFileName() != null)
	    {
		fileClass = Class.forName("java.io.File");
		Constructor constructor = analyserClass.getConstructor(fileClass);
		return (Analyzer)constructor.newInstance(new File(getStopWordFileName()));
	    }
	    else
	    {
		Constructor constructor = analyserClass.getConstructor();
		return (Analyzer)constructor.newInstance();
	    }
	}

    /**
     * Get the <code>StopWordFileName</code> value.
     *
     * @return a <code>String</code> value
     */
    public final String getStopWordFileName() {
	return stopWordFileName;
    }

    /**
     * Set the <code>StopWordFileName</code> value.
     *
     * @param newStopWordFileName The new StopWordFileName value.
     */
    public final void setStopWordFileName(final String newStopWordFileName) {
	this.stopWordFileName = newStopWordFileName;
    }

    /**
     * Get the <code>OptimizeOnClose</code> value.
     *
     * @return a <code>boolean</code> value
     */
    public final boolean isOptimizeOnClose() {
	return optimizeOnClose;
    }

    /**
     * Set the <code>OptimizeOnClose</code> value.
     *
     * @param newOptimizeOnClose The new OptimizeOnClose value.
     */
    public final void setOptimizeOnClose(final boolean newOptimizeOnClose) {
	this.optimizeOnClose = newOptimizeOnClose;
    }

    void printDefaults()
	{
	    System.err.println("LuceneIndex: LuceneIndexName: " + getLuceneIndexName());
	    System.err.println("LuceneIndex: AnalyzerName: " + getAnalyzerName());
	}

    public boolean isThreaded()
	{
	    return false;
	}
    /**
     * Get the <code>RemoveOnDone</code> value.
     *
     * @return a <code>boolean</code> value
     */
    public final boolean isRemoveOnDone() {
	return removeOnDone;
    }

    /**
     * Set the <code>RemoveOnDone</code> value.
     *
     * @param newRemoveOnDone The new RemoveOnDone value.
     */
    public final void setRemoveOnDone(final boolean newRemoveOnDone) {
	this.removeOnDone = newRemoveOnDone;
    }

    /**
     * Get the <code>PrimaryKeyField</code> value.
     *
     * @return a <code>String</code> value
     */
    public final String getPrimaryKeyField() {
	return primaryKeyField;
    }

    /**
     * Set the <code>PrimaryKeyField</code> value.
     *
     * @param newPrimaryKeyField The new PrimaryKeyField value.
     */
    public final void setPrimaryKeyField(final String newPrimaryKeyField) {
	this.primaryKeyField = newPrimaryKeyField;
    }

    /**
     * Get the <code>Query</code> value.
     *
     * @return a <code>String</code> value
     */
    public final String getQuery() {
	return query;
    }

    /**
     * Set the <code>Query</code> value.
     *
     * @param newQuery The new Query value.
     */
    public final void setQuery(final String newQuery) {
	this.query = newQuery;
    }

    /**
     * Get the <code>SourceLocation</code> value.
     *
     * @return a <code>String</code> value
     */
    public final String getSourceLocation() {
	return SourceLocation;
    }

    /**
     * Set the <code>SourceLocation</code> value.
     *
     * @param newSourceLocation The new SourceLocation value.
     */
    public final void setSourceLocation(final String newSourceLocation) {
	this.SourceLocation = newSourceLocation;
    }
}
