package ca.nrc.cisti.lusql.drivers.lucene;
import java.io.*;
import java.util.Properties;
import java.lang.reflect.Constructor;
import com.sun.labs.minion.*;
import ca.nrc.cisti.lusql.core.*;
/**
 * Describe class LuceneIndex here.
 *
 *
 * Created: Mon Dec  1 16:09:02 2008
 *
 * @author <a href="mailto:gnewton@">Glen Newton</a>
 * @version 1.0
 */
public class MinionDocSink 
    extends MinionCore
    implements DocSink
{

    /**
     * Creates a new <code>MinionDocSink</code> instance.
     *
     */
    public MinionDocSink() {

    }

    public void commit() throws DocSinkException
	{
	    try
	    {
		writer.commit();
	    }
	    catch(Throwable t)
	    {
		t.printStackTrace();
		throw new DocSinkException();
	    }
	}

    static
	{
	    System.setProperty("org.apache.lucene.FSDirectory.class",NIOFSDirectory.class.getName());
	}


    protected SearchEngine engine;

    public void init(Properties p) 
	throws PluginException
	{
	    try
	    {
		extractProperties(p);
		SearchEngineFactory.getSearchEngine(p.getProperty(LuSqlFields.SinkLocationKey));
	    }
	    catch(Throwable t)
	    {
		printDefaults();
		t.printStackTrace();
		throw new PluginException();
	    }
	}

    public Map<String, String> explainProperties()
	{
	    String className = this.getClass().getName() + ".";
	    Map<String, String> p = new HashMap<String, String>();
	    p.put(LuSqlFields.BufferSizeKey, "RAM Buffer size");
	    p.put(LuSqlFields.CreateSinkKey, "Create index if does not exist");
	    p.put(LuSqlFields.OptimizeOnCloseKey, "Optimize the index on closing");
	    p.put(LuSqlFields.SinkLocationKey, "Name of index directory");
	    p.put(LuSqlFields.AnalyzerClassKey, "Class name for the analyzer");
	    p.put(LuSqlFields.StopWordFileNameKey, "Name of stop work file");
	    p.put(LuSqlFields.RemoveSinksOnDoneKey, "Remove on done? boolean");
	    return p;
	}
    
    public void addDoc(Doc doc)  
	throws DocSinkException
	{
	    try
	    {
		Document document = makeDocument(doc);
		writer.addDocument(document);
	    }
	    
	    catch(Throwable t)
	    {
		t.printStackTrace();
		throw new DocSinkException("Failed addDocument");
	    }
	}

    public void done()  
	throws PluginException
	{
	    System.out.println("Closing lucene index");
	    try
	    {
		if(writer != null)
		{
		    if(optimizeOnClose)
		    {
			System.out.println("Optimizing: " + getLuceneIndexName());
			writer.optimize();
			System.out.println("  Done optimizing: " + getLuceneIndexName());
		    }
		    writer.close();
		}
	    }
	    catch(Throwable t)
	    {
		t.printStackTrace();
		throw new PluginException("Failed to optimize/close index)");
	    }
	    System.out.println("Closed lucene index");

	    //TODO removeOnDone
	    if(isRemoveOnDone())
		System.out.println("TODO: Should be removing now: " + getLuceneIndexName());
	}

    Document makeDocument(Doc doc)
	{
	    Document document = new Document();
	    Iterator<String> it = doc.getFieldNames();

	    while(it.hasNext())
	    {
		String fieldName = it.next();
		List<String> values = doc.getFieldValues(fieldName);
		if(values != null)
		{
		    LuceneFieldParameters lpf = doc.getFieldParameters(fieldName);
		    Iterator<String> iValues = values.iterator();
		    while(iValues.hasNext())
		    {
			String v = iValues.next();
			if(v != null)
			{
			    document.add(new Field(fieldName, v, lpf.getStore(), lpf.getIndex(), lpf.getTermVector()));
			}
		    }
		}
	    }
	    return document;
	}

    public Object internal()
	{
	    return  writer;
	}

    void extractProperties(Properties p)
	{
	    luceneExtractProperties(p);
	}


}  //////




